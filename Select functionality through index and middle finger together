import cv2
import mediapipe as mp
import pyautogui
import math

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.8, min_tracking_confidence=0.8)
mp_draw = mp.solutions.drawing_utils

# Start video capture
cap = cv2.VideoCapture(0)

# Threshold for detecting a "select" gesture
selection_threshold = 30  # Pixels

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip the frame horizontally for a mirror effect
    frame = cv2.flip(frame, 1)

    # Convert BGR to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    if results.multi_hand_landmarks:
        for hand_landmarks, handedness in zip(results.multi_hand_landmarks, results.multi_handedness):
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Get the label for the hand (Left or Right)
            hand_label = handedness.classification[0].label

            # Get the positions of index fingertip (landmark 8) and middle fingertip (landmark 12)
            index_tip = hand_landmarks.landmark[8]
            middle_tip = hand_landmarks.landmark[12]

            # Convert normalized positions to pixel coordinates
            index_x, index_y = int(index_tip.x * frame.shape[1]), int(index_tip.y * frame.shape[0])
            middle_x, middle_y = int(middle_tip.x * frame.shape[1]), int(middle_tip.y * frame.shape[0])

            # Draw circles on the fingertips for debugging
            cv2.circle(frame, (index_x, index_y), 10, (0, 255, 0), -1)  # Index finger
            cv2.circle(frame, (middle_x, middle_y), 10, (255, 0, 0), -1)  # Middle finger

            # Calculate the Euclidean distance between index and middle fingertips
            distance = math.sqrt((middle_x - index_x) ** 2 + (middle_y - index_y) ** 2)

            # Check if the distance is below the threshold
            if distance < selection_threshold:
                cv2.putText(frame, f"{hand_label} SELECT", (index_x - 50, index_y - 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
                pyautogui.click()  # Simulate a mouse click
            else:
                cv2.putText(frame, f"{hand_label} Active", (index_x - 50, index_y - 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

    # Display the frame
    cv2.imshow("Select Gesture with Index and Middle Fingers", frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
