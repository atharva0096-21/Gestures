import cv2
import mediapipe as mp
import pyautogui  # For simulating zoom actions (e.g., Ctrl + "+" or Ctrl + "-")

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_draw = mp.solutions.drawing_utils

# Start video capture
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip the frame horizontally for a mirror effect
    frame = cv2.flip(frame, 1)

    # Convert BGR to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    # Draw landmarks and detect gestures
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # Extract landmarks for thumb tip (4) and index tip (8)
            thumb_tip = hand_landmarks.landmark[4]
            index_tip = hand_landmarks.landmark[8]

            # Convert normalized coordinates to pixel values
            frame_width, frame_height = frame.shape[1], frame.shape[0]
            thumb_x, thumb_y = int(thumb_tip.x * frame_width), int(thumb_tip.y * frame_height)
            index_x, index_y = int(index_tip.x * frame_width), int(index_tip.y * frame_height)

            # Calculate Euclidean distance between thumb and index finger
            distance = ((thumb_x - index_x)**2 + (thumb_y - index_y)**2)**0.5
            print(f"Distance: {distance}")  # Debugging

            # Thresholds for pinch-to-zoom
            if distance < 40:  # Fingers close together
                print("Zoom In Detected")
                pyautogui.hotkey("ctrl", "+")  # Simulate Ctrl + "+"
            elif distance > 100:  # Fingers far apart
                print("Zoom Out Detected")
                pyautogui.hotkey("ctrl", "-")  # Simulate Ctrl + "-")

    # Display the frame
    cv2.imshow("Pinch-to-Zoom Gesture Detection", frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
